<?php
class MMS_Model_DriveSummary
{
	public $BeginYard;
	public $DriveSummaryId;
	public $GameId;
	public $TeamId;
	public $YardsGained;
	public $NumberOfPlays;
	public $Quarter;
	public $Result;
	public $StartTime;
	public $TeamName;
	public $TimeOfPossession;
	public $Week;
	public $Points;
	public $IsValueDrive;

	/**
	 * @return string
	 */
	public function getBeginYard()
	{
		return $this->BeginYard;
	}

	/**
	 * @return int
	 */
	public function getDriveSummaryId()
	{
		return $this->DriveSummaryId;
	}

	/**
	 * @return int
	 */
	public function getGameId()
	{
		return $this->GameId;
	}

	/**
	 * @return int
	 */
	public function getTeamId()
	{
		return $this->TeamId;
	}

	/**
	 * @return int
	 */
	public function getYardsGained()
	{
		return $this->YardsGained;
	}

	/**
	 * @return int
	 */
	public function getNumberOfPlays()
	{
		return $this->NumberOfPlays;
	}

	/**
	 * @return int
	 */
	public function getQuarter()
	{
		return $this->Quarter;
	}

	/**
	 * @return string
	 */
	public function getResult()
	{
		return $this->Result;
	}

	/**
	 * @return string
	 */
	public function getStartTime()
	{
		return $this->StartTime;
	}

	/**
	 * @return string
	 */
	public function getTeamName()
	{
		return $this->TeamName;
	}

	/**
	 * @return string
	 */
	public function getTimeOfPossession()
	{
		return $this->TimeOfPossession;
	}

	/**
	 * @return int
	 */
	public function getWeek()
	{
		return $this->Week;
	}
	
	/**
	 * @return int
	 */
	public function getPoints()
	{
		return $this->Points;
	}

	/**
	 * @return boolean
	 */
	public function IsValueDrive()
	{
		return $this->IsValueDrive;
	}
	
	/**
	 * 
	 * @param string newVal
	 */
	public function setBeginYard($newVal)
	{
		$this->BeginYard = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setDriveSummaryId($newVal)
	{
		$this->DriveSummaryId = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setGameId($newVal)
	{
		$this->GameId = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setTeamId($newVal)
	{
		$this->TeamId = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setYardsGained($newVal)
	{
		$this->YardsGained = $newVal;
	}
	
	/**
	 * 
	 * @param int newVal
	 */
	public function setNumberOfPlays($newVal)
	{
		$this->NumberOfPlays = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setQuarter($newVal)
	{
		$this->Quarter = $newVal;
	}

	/**
	 * 
	 * @param string newVal
	 */
	public function setResult($newVal)
	{
		$this->Result = $newVal;
	}

	/**
	 * 
	 * @param string newVal
	 */
	public function setStartTime($newVal)
	{
		$this->StartTime = $newVal;
	}

	/**
	 * 
	 * @param string newVal
	 */
	public function setTeamName($newVal)
	{
		$this->TeamName = $newVal;
	}

	/**
	 * 
	 * @param string newVal
	 */
	public function setTimeOfPossession($newVal)
	{
		$this->TimeOfPossession = $newVal;
	}

	/**
	 * 
	 * @param int newVal
	 */
	public function setWeek($newVal)
	{
		$this->Week = $newVal;
	}
	
	/**
	 * @param int $points
	 */
	public function setPoints( $points )
	{
		$this->Points = $points;
	}

	/**
	 * The 'points' results of the query need to be passed to this function at
	 * instantiation. If points is null, then it is not a value drive, else it
	 * is.
	 * 
	 * @param int|null $points
	 */
	public function setIsValueDrive( $points )
	{
		if ( is_null($points) )
		{
			$this->IsValueDrive = false;
		}
		else
		{
			$this->IsValueDrive = true;
		}
	}
	
	function __construct( $row )
	{
		$this->setBeginYard( $row['BeginYard'] );
		$this->setDriveSummaryId( $row['DriveSummaryId'] );
		$this->setGameId( $row['GameId'] );
		$this->setNumberOfPlays( $row['NumberOfPlays'] );
		$this->setQuarter( $row['Quarter'] );
		$this->setResult( $row['Result'] );
		$this->setStartTime( $row['StartTime'] );
		$this->setTeamId( $row['TeamId'] );
		$this->setTeamName( $row['TeamName'] );
		$this->setTimeOfPossession( $row['TimeOfPossession'] );
		$this->setWeek( $row['Week'] );
		$this->setYardsGained( $row['YardsGained'] );
		$this->determinePoints();
		$this->setIsValueDrive( $row['Points'] );
	}
	
	public function determinePoints()
	{
		$result	= $this->getResult();
		$points	= 0;
		/*
		 * If the result was a td, then add 7 points.
		 */
		if ( stristr( $result, 'TD' ) !== false )
		{
			$points = 7;
		}
		/*
		 * Else if the result was a fg, then add 3 points.
		 */
		elseif ( stristr( $result, 'FG' ) !== false )
		{
			$points = 3;
		}
		$this->setPoints( $points );
	}
	
	public static function DriveSummaryByGame( $gameId )
	{
		if ( !is_numeric( $gameId ) )
		{
			return 'A numeric value is required to get the drive summary by game id.';
		}
		
		$db = MMS_Db_Table_NCAA_DriveSummary::getDefaultAdapter();
		$select = $db->select()
			->from( array( 'ds' => 'drivesummary' ), array( 'DriveSummaryId', 'Quarter', 'StartTime', 'TimeOfPossession', 'BeginYard', 'NumberOfPlays', 'YardsGained', 'Result' ) )
			->join( array( 't' => 'team' ), 'ds.TeamId=t.TeamId', array( 'TeamName', 'TeamId' ) )
			->join( array( 'g' => 'game' ), 'g.GameId=ds.GameId', array( 'GameId', 'Week' ) )
			->joinLeft( array( 'vd' => 'valuedrive' ), 'ds.DriveSummaryId=vd.DriveSummaryId', array( 'Points' ) )
			->where( 'g.GameId=?', $gameId )
			->order( array( 'Quarter ASC', 'TIME_TO_SEC(StartTime)' ) );
		/*
		 * Now we can fetch the data.
		 */
		$rows = $db->fetchAll( $select );
		$list = array();
		foreach ( $rows as $row )
		{
			$list[] = new MMS_Model_DriveSummary( $row );
		}
		return $list;
	}

	/**
	 * 
	 * @param int $teamId
	 * @return MMS_Model_DriveSummary[]
	 */
	public static function DriveSummaryByTeamId( $teamId )
	{
		if ( !is_numeric( $teamId ) )
		{
			return 'A numeric value is required to get the drive summary by team id.';
		}
		
		$db = MMS_Db_Table_NCAA_DriveSummary::getDefaultAdapter();
		$select = $db->select()
			->from( array( 'ds' => 'drivesummary' ), array( 'DriveSummaryId', 'Quarter', 'StartTime', 'TimeOfPossession', 'BeginYard', 'NumberOfPlays', 'YardsGained', 'Result' ) )
			->join( array( 't' => 'team' ), 'ds.TeamId=t.TeamId', array( 'TeamName', 'TeamId' ) )
			->join( array( 'g' => 'game' ), 'g.GameId=ds.GameId', array( 'GameId', 'Week' ) )
			->joinLeft( array( 'vd' => 'valuedrive' ), 'ds.DriveSummaryId=vd.DriveSummaryId', array( 'Points' ) )
			->where( 'g.HomeTeamId=?', $teamId )
			->orWhere( 'g.AwayTeamId=?', $teamId )
			->order( array( 'Week ASC', 'TIME_TO_SEC(StartTime) ASC' ) );
		/*
		 * Now we can fetch the data.
		 */
		$rows = $db->fetchAll( $select );
		$list = array();
		foreach ( $rows as $row )
		{
			$list[] = new MMS_Model_DriveSummary( $row );
		}
		return $list;
	}
	
	public function toJson()
	{
		return json_encode( $this );
	}
}